/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SectorInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEPOSIT_ROLE()": FunctionFragment;
    "PUNISH_ROLE()": FunctionFragment;
    "VERIFY_ROLE()": FunctionFragment;
    "afid()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "invalid()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "numDeposits()": FunctionFragment;
    "punish(uint256)": FunctionFragment;
    "punishPool()": FunctionFragment;
    "release(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rnode()": FunctionFragment;
    "submitVerification(address,bool)": FunctionFragment;
    "submittedTime()": FunctionFragment;
    "submitter()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUNISH_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "afid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "invalid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "punish",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "punishPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "rnode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitVerification",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submittedTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "submitter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUNISH_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invalid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "punish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "punishPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rnode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submittedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint256,address,uint256,uint256)": EventFragment;
    "Punish(uint256,address,uint256)": EventFragment;
    "Release(uint256,address,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SectorVerification(address,string,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Punish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Release"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SectorVerification"): EventFragment;
}

export class Sector extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SectorInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEPOSIT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    PUNISH_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "PUNISH_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    afid(overrides?: CallOverrides): Promise<[string]>;

    "afid()"(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    "beneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    "deposit(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean, boolean, string] & {
          amount: BigNumber;
          releaseTime: BigNumber;
          punished: boolean;
          released: boolean;
          comment: string;
        }
      ]
    >;

    "deposit(uint256,string)"(
      releaseTime_: BigNumberish,
      comment_: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invalid(overrides?: CallOverrides): Promise<[boolean]>;

    "invalid()"(overrides?: CallOverrides): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<[string]>;

    numDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numDeposits()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    punish(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "punish(uint256)"(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    punishPool(overrides?: CallOverrides): Promise<[string]>;

    "punishPool()"(overrides?: CallOverrides): Promise<[string]>;

    release(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "release(uint256)"(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rnode(overrides?: CallOverrides): Promise<[string]>;

    "rnode()"(overrides?: CallOverrides): Promise<[string]>;

    submitVerification(
      seed_: string,
      success_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitVerification(address,bool)"(
      seed_: string,
      success_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submittedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "submittedTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitter(overrides?: CallOverrides): Promise<[string]>;

    "submitter()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEPOSIT_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEPOSIT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  PUNISH_ROLE(overrides?: CallOverrides): Promise<string>;

  "PUNISH_ROLE()"(overrides?: CallOverrides): Promise<string>;

  VERIFY_ROLE(overrides?: CallOverrides): Promise<string>;

  "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<string>;

  afid(overrides?: CallOverrides): Promise<string>;

  "afid()"(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  "beneficiary()"(overrides?: CallOverrides): Promise<string>;

  "deposit(uint256)"(
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean, string] & {
      amount: BigNumber;
      releaseTime: BigNumber;
      punished: boolean;
      released: boolean;
      comment: string;
    }
  >;

  "deposit(uint256,string)"(
    releaseTime_: BigNumberish,
    comment_: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invalid(overrides?: CallOverrides): Promise<boolean>;

  "invalid()"(overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

  numDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  "numDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

  punish(
    index_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "punish(uint256)"(
    index_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  punishPool(overrides?: CallOverrides): Promise<string>;

  "punishPool()"(overrides?: CallOverrides): Promise<string>;

  release(
    index_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "release(uint256)"(
    index_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rnode(overrides?: CallOverrides): Promise<string>;

  "rnode()"(overrides?: CallOverrides): Promise<string>;

  submitVerification(
    seed_: string,
    success_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitVerification(address,bool)"(
    seed_: string,
    success_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submittedTime(overrides?: CallOverrides): Promise<BigNumber>;

  "submittedTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  submitter(overrides?: CallOverrides): Promise<string>;

  "submitter()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEPOSIT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    PUNISH_ROLE(overrides?: CallOverrides): Promise<string>;

    "PUNISH_ROLE()"(overrides?: CallOverrides): Promise<string>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<string>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<string>;

    afid(overrides?: CallOverrides): Promise<string>;

    "afid()"(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    "beneficiary()"(overrides?: CallOverrides): Promise<string>;

    "deposit(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean, string] & {
        amount: BigNumber;
        releaseTime: BigNumber;
        punished: boolean;
        released: boolean;
        comment: string;
      }
    >;

    "deposit(uint256,string)"(
      releaseTime_: BigNumberish,
      comment_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invalid(overrides?: CallOverrides): Promise<boolean>;

    "invalid()"(overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

    numDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    "numDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

    punish(index_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "punish(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    punishPool(overrides?: CallOverrides): Promise<string>;

    "punishPool()"(overrides?: CallOverrides): Promise<string>;

    release(index_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "release(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rnode(overrides?: CallOverrides): Promise<string>;

    "rnode()"(overrides?: CallOverrides): Promise<string>;

    submitVerification(
      seed_: string,
      success_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVerification(address,bool)"(
      seed_: string,
      success_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submittedTime(overrides?: CallOverrides): Promise<BigNumber>;

    "submittedTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitter(overrides?: CallOverrides): Promise<string>;

    "submitter()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Deposit(
      position: null,
      beneficiary: null,
      releaseTime: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        position: BigNumber;
        beneficiary: string;
        releaseTime: BigNumber;
        amount: BigNumber;
      }
    >;

    Punish(
      position: null,
      beneficiary: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { position: BigNumber; beneficiary: string; amount: BigNumber }
    >;

    Release(
      position: null,
      beneficiary: null,
      enforcedReleaseTime: null,
      realReleaseTime: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        position: BigNumber;
        beneficiary: string;
        enforcedReleaseTime: BigNumber;
        realReleaseTime: BigNumber;
        amount: BigNumber;
      }
    >;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    SectorVerification(
      sector: null,
      sector_afid: null,
      seed_afid: null,
      success: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      {
        sector: string;
        sector_afid: string;
        seed_afid: string;
        success: boolean;
      }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEPOSIT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PUNISH_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PUNISH_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    afid(overrides?: CallOverrides): Promise<BigNumber>;

    "afid()"(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,string)"(
      releaseTime_: BigNumberish,
      comment_: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalid(overrides?: CallOverrides): Promise<BigNumber>;

    "invalid()"(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    numDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    "numDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

    punish(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "punish(uint256)"(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    punishPool(overrides?: CallOverrides): Promise<BigNumber>;

    "punishPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "release(uint256)"(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rnode(overrides?: CallOverrides): Promise<BigNumber>;

    "rnode()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitVerification(
      seed_: string,
      success_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitVerification(address,bool)"(
      seed_: string,
      success_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submittedTime(overrides?: CallOverrides): Promise<BigNumber>;

    "submittedTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitter(overrides?: CallOverrides): Promise<BigNumber>;

    "submitter()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPOSIT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEPOSIT_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUNISH_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PUNISH_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    afid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "afid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beneficiary()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,string)"(
      releaseTime_: BigNumberish,
      comment_: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "invalid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numDeposits()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    punish(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "punish(uint256)"(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    punishPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "punishPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "release(uint256)"(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rnode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rnode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitVerification(
      seed_: string,
      success_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitVerification(address,bool)"(
      seed_: string,
      success_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submittedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "submittedTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "submitter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
