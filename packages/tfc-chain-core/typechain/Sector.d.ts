/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SectorInterface extends ethers.utils.Interface {
  functions: {
    "afid()": FunctionFragment;
    "dead()": FunctionFragment;
    "lockedTFC()": FunctionFragment;
    "owner()": FunctionFragment;
    "punish()": FunctionFragment;
    "setVerification(address)": FunctionFragment;
    "turboFil()": FunctionFragment;
    "verification()": FunctionFragment;
    "verificationResult(bytes28,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "afid", values?: undefined): string;
  encodeFunctionData(functionFragment: "dead", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockedTFC", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "punish", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVerification",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "turboFil", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verificationResult",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "afid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedTFC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "punish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "turboFil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationResult",
    data: BytesLike
  ): Result;

  events: {
    "VerificationResult(bytes28,bool,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VerificationResult"): EventFragment;
}

export class Sector extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SectorInterface;

  functions: {
    afid(overrides?: CallOverrides): Promise<[string]>;

    "afid()"(overrides?: CallOverrides): Promise<[string]>;

    dead(overrides?: CallOverrides): Promise<[boolean]>;

    "dead()"(overrides?: CallOverrides): Promise<[boolean]>;

    lockedTFC(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockedTFC()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    punish(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "punish()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVerification(
      verification_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVerification(address)"(
      verification_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    turboFil(overrides?: CallOverrides): Promise<[string]>;

    "turboFil()"(overrides?: CallOverrides): Promise<[string]>;

    verification(overrides?: CallOverrides): Promise<[string]>;

    "verification()"(overrides?: CallOverrides): Promise<[string]>;

    verificationResult(
      seed_: BytesLike,
      result_: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verificationResult(bytes28,bool)"(
      seed_: BytesLike,
      result_: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  afid(overrides?: CallOverrides): Promise<string>;

  "afid()"(overrides?: CallOverrides): Promise<string>;

  dead(overrides?: CallOverrides): Promise<boolean>;

  "dead()"(overrides?: CallOverrides): Promise<boolean>;

  lockedTFC(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedTFC()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  punish(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "punish()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVerification(
    verification_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVerification(address)"(
    verification_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  turboFil(overrides?: CallOverrides): Promise<string>;

  "turboFil()"(overrides?: CallOverrides): Promise<string>;

  verification(overrides?: CallOverrides): Promise<string>;

  "verification()"(overrides?: CallOverrides): Promise<string>;

  verificationResult(
    seed_: BytesLike,
    result_: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verificationResult(bytes28,bool)"(
    seed_: BytesLike,
    result_: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    afid(overrides?: CallOverrides): Promise<string>;

    "afid()"(overrides?: CallOverrides): Promise<string>;

    dead(overrides?: CallOverrides): Promise<boolean>;

    "dead()"(overrides?: CallOverrides): Promise<boolean>;

    lockedTFC(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedTFC()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    punish(overrides?: CallOverrides): Promise<BigNumber>;

    "punish()"(overrides?: CallOverrides): Promise<BigNumber>;

    setVerification(
      verification_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVerification(address)"(
      verification_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    turboFil(overrides?: CallOverrides): Promise<string>;

    "turboFil()"(overrides?: CallOverrides): Promise<string>;

    verification(overrides?: CallOverrides): Promise<string>;

    "verification()"(overrides?: CallOverrides): Promise<string>;

    verificationResult(
      seed_: BytesLike,
      result_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "verificationResult(bytes28,bool)"(
      seed_: BytesLike,
      result_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    VerificationResult(
      seed: null,
      result: null,
      reward: null,
      punish: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber],
      { seed: string; result: boolean; reward: BigNumber; punish: BigNumber }
    >;
  };

  estimateGas: {
    afid(overrides?: CallOverrides): Promise<BigNumber>;

    "afid()"(overrides?: CallOverrides): Promise<BigNumber>;

    dead(overrides?: CallOverrides): Promise<BigNumber>;

    "dead()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedTFC(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedTFC()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    punish(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "punish()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVerification(
      verification_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVerification(address)"(
      verification_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    turboFil(overrides?: CallOverrides): Promise<BigNumber>;

    "turboFil()"(overrides?: CallOverrides): Promise<BigNumber>;

    verification(overrides?: CallOverrides): Promise<BigNumber>;

    "verification()"(overrides?: CallOverrides): Promise<BigNumber>;

    verificationResult(
      seed_: BytesLike,
      result_: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verificationResult(bytes28,bool)"(
      seed_: BytesLike,
      result_: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    afid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "afid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dead()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedTFC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedTFC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    punish(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "punish()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVerification(
      verification_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVerification(address)"(
      verification_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    turboFil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "turboFil()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verification(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "verification()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verificationResult(
      seed_: BytesLike,
      result_: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verificationResult(bytes28,bool)"(
      seed_: BytesLike,
      result_: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
