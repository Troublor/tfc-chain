/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { FNode } from "../FNode";

export class FNode__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _rnode: string,
    _id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FNode> {
    return super.deploy(_rnode, _id, overrides || {}) as Promise<FNode>;
  }
  getDeployTransaction(
    _rnode: string,
    _id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_rnode, _id, overrides || {});
  }
  attach(address: string): FNode {
    return super.attach(address) as FNode;
  }
  connect(signer: Signer): FNode__factory {
    return super.connect(signer) as FNode__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FNode {
    return new Contract(address, _abi, signerOrProvider) as FNode;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRNode",
        name: "_rnode",
        type: "address",
      },
      {
        internalType: "string",
        name: "_id",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610407380380610407833981810160405281019061003291906101b0565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610088929190610090565b5050506103ba565b82805461009c906102d1565b90600052602060002090601f0160209004810192826100be5760008555610105565b82601f106100d757805160ff1916838001178555610105565b82800160010185558215610105579182015b828111156101045782518255916020019190600101906100e9565b5b5090506101129190610116565b5090565b5b8082111561012f576000816000905550600101610117565b5090565b600061014661014184610229565b610204565b90508281526020810184848401111561015e57600080fd5b61016984828561029e565b509392505050565b600081519050610180816103a3565b92915050565b600082601f83011261019757600080fd5b81516101a7848260208601610133565b91505092915050565b600080604083850312156101c357600080fd5b60006101d185828601610171565b925050602083015167ffffffffffffffff8111156101ee57600080fd5b6101fa85828601610186565b9150509250929050565b600061020e61021f565b905061021a8282610303565b919050565b6000604051905090565b600067ffffffffffffffff82111561024457610243610363565b5b61024d82610392565b9050602081019050919050565b60006102658261027e565b9050919050565b60006102778261025a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156102bc5780820151818401526020810190506102a1565b838111156102cb576000848401525b50505050565b600060028204905060018216806102e957607f821691505b602082108114156102fd576102fc610334565b5b50919050565b61030c82610392565b810181811067ffffffffffffffff8211171561032b5761032a610363565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6103ac8161026c565b81146103b757600080fd5b50565b603f806103c86000396000f3fe6080604052600080fdfea264697066735822122070ddf62e559b2b839317d2225a5dc586289d9baa2e3078f11aaa9f0c2821f76f64736f6c63430008020033";
