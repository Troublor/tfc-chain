/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TurboFilInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "REGISTER_ROLE()": FunctionFragment;
    "REWARD_ROLE()": FunctionFragment;
    "SEED_ROLE()": FunctionFragment;
    "distributeTFC()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "proposedSeedMapping(string)": FunctionFragment;
    "registerRNode(address,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rnodeMapping(string)": FunctionFragment;
    "submitSeed(string)": FunctionFragment;
    "submitSeedEvaluation(string,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "verify()": FunctionFragment;
    "verifySector(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SEED_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeTFC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedSeedMapping",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRNode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rnodeMapping",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "submitSeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitSeedEvaluation",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verify", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifySector",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SEED_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeTFC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedSeedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rnodeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitSeedEvaluation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySector",
    data: BytesLike
  ): Result;

  events: {
    "EvaluateSeed(address,string,bool)": EventFragment;
    "RegisterRNode(address,address,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SubmitSeed(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EvaluateSeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterRNode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitSeed"): EventFragment;
}

export class TurboFil extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TurboFilInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    REGISTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "REGISTER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    REWARD_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "REWARD_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SEED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    distributeTFC(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeTFC()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedSeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        submitter: string;
        afid: string;
        timestamp: BigNumber;
        likes: BigNumber;
        dislikes: BigNumber;
      }
    >;

    "proposedSeedMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        submitter: string;
        afid: string;
        timestamp: BigNumber;
        likes: BigNumber;
        dislikes: BigNumber;
      }
    >;

    registerRNode(
      owner: string,
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerRNode(address,string)"(
      owner: string,
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rnodeMapping(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "rnodeMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    submitSeed(
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitSeed(string)"(
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitSeedEvaluation(
      seed_afid: string,
      like: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitSeedEvaluation(string,bool)"(
      seed_afid: string,
      like: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verify()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifySector(
      sector_afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verifySector(string)"(
      sector_afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  REGISTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "REGISTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  REWARD_ROLE(overrides?: CallOverrides): Promise<string>;

  "REWARD_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SEED_ROLE(overrides?: CallOverrides): Promise<string>;

  "SEED_ROLE()"(overrides?: CallOverrides): Promise<string>;

  distributeTFC(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeTFC()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _rnodeFactory: string,
    _sectorSubmissionShare: string,
    _sectorVerificationShare: string,
    _seedSubmissionShare: string,
    _seedEvaluationShare: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _rnodeFactory: string,
    _sectorSubmissionShare: string,
    _sectorVerificationShare: string,
    _seedSubmissionShare: string,
    _seedEvaluationShare: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedSeedMapping(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      submitter: string;
      afid: string;
      timestamp: BigNumber;
      likes: BigNumber;
      dislikes: BigNumber;
    }
  >;

  "proposedSeedMapping(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      submitter: string;
      afid: string;
      timestamp: BigNumber;
      likes: BigNumber;
      dislikes: BigNumber;
    }
  >;

  registerRNode(
    owner: string,
    afid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerRNode(address,string)"(
    owner: string,
    afid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rnodeMapping(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rnodeMapping(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  submitSeed(
    afid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitSeed(string)"(
    afid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitSeedEvaluation(
    seed_afid: string,
    like: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitSeedEvaluation(string,bool)"(
    seed_afid: string,
    like: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verify()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifySector(
    sector_afid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verifySector(string)"(
    sector_afid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    REGISTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "REGISTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    REWARD_ROLE(overrides?: CallOverrides): Promise<string>;

    "REWARD_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SEED_ROLE(overrides?: CallOverrides): Promise<string>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<string>;

    distributeTFC(overrides?: CallOverrides): Promise<void>;

    "distributeTFC()"(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedSeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        submitter: string;
        afid: string;
        timestamp: BigNumber;
        likes: BigNumber;
        dislikes: BigNumber;
      }
    >;

    "proposedSeedMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        submitter: string;
        afid: string;
        timestamp: BigNumber;
        likes: BigNumber;
        dislikes: BigNumber;
      }
    >;

    registerRNode(
      owner: string,
      afid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRNode(address,string)"(
      owner: string,
      afid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rnodeMapping(arg0: string, overrides?: CallOverrides): Promise<string>;

    "rnodeMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    submitSeed(afid: string, overrides?: CallOverrides): Promise<void>;

    "submitSeed(string)"(
      afid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSeedEvaluation(
      seed_afid: string,
      like: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitSeedEvaluation(string,bool)"(
      seed_afid: string,
      like: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(overrides?: CallOverrides): Promise<void>;

    "verify()"(overrides?: CallOverrides): Promise<void>;

    verifySector(sector_afid: string, overrides?: CallOverrides): Promise<void>;

    "verifySector(string)"(
      sector_afid: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EvaluateSeed(
      evaluator: null,
      afid: null,
      like: null
    ): TypedEventFilter<
      [string, string, boolean],
      { evaluator: string; afid: string; like: boolean }
    >;

    RegisterRNode(
      owner: null,
      rnode: null,
      afid: null
    ): TypedEventFilter<
      [string, string, string],
      { owner: string; rnode: string; afid: string }
    >;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    SubmitSeed(
      submitter: null,
      afid: null
    ): TypedEventFilter<[string, string], { submitter: string; afid: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "REGISTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "REWARD_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributeTFC(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeTFC()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedSeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposedSeedMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRNode(
      owner: string,
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerRNode(address,string)"(
      owner: string,
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rnodeMapping(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rnodeMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitSeed(
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitSeed(string)"(
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitSeedEvaluation(
      seed_afid: string,
      like: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitSeedEvaluation(string,bool)"(
      seed_afid: string,
      like: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verify()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifySector(
      sector_afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verifySector(string)"(
      sector_afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REGISTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REWARD_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeTFC(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeTFC()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _rnodeFactory: string,
      _sectorSubmissionShare: string,
      _sectorVerificationShare: string,
      _seedSubmissionShare: string,
      _seedEvaluationShare: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedSeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposedSeedMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRNode(
      owner: string,
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerRNode(address,string)"(
      owner: string,
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rnodeMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rnodeMapping(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitSeed(
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitSeed(string)"(
      afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitSeedEvaluation(
      seed_afid: string,
      like: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitSeedEvaluation(string,bool)"(
      seed_afid: string,
      like: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verify()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifySector(
      sector_afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verifySector(string)"(
      sector_afid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
