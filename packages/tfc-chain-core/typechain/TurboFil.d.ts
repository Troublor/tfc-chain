/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TurboFilInterface extends ethers.utils.Interface {
  functions: {
    "register(address)": FunctionFragment;
    "registerFNode(string,string)": FunctionFragment;
    "registerMobile(string)": FunctionFragment;
    "registerRNode(string)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerFNode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMobile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRNode",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMobile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "Register(address,address)": EventFragment;
    "RegisterFNode(address,string,address,address)": EventFragment;
    "RegisterMobile(address,string)": EventFragment;
    "RegisterRNode(address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterFNode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterMobile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterRNode"): EventFragment;
}

export class TurboFil extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TurboFilInterface;

  functions: {
    register(
      recommender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "register(address)"(
      recommender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerFNode(string,string)"(
      id: string,
      rnode_id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerFNode(string,address)"(
      id: string,
      rnode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerMobile(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerMobile(string)"(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerRNode(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerRNode(string)"(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;
  };

  register(
    recommender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "register(address)"(
    recommender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerFNode(string,string)"(
    id: string,
    rnode_id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerFNode(string,address)"(
    id: string,
    rnode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerMobile(
    phone: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerMobile(string)"(
    phone: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerRNode(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerRNode(string)"(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    register(recommender: string, overrides?: CallOverrides): Promise<void>;

    "register(address)"(
      recommender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerFNode(string,string)"(
      id: string,
      rnode_id: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerFNode(string,address)"(
      id: string,
      rnode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerMobile(phone: string, overrides?: CallOverrides): Promise<void>;

    "registerMobile(string)"(
      phone: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRNode(id: string, overrides?: CallOverrides): Promise<void>;

    "registerRNode(string)"(
      id: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Register(
      addr: null,
      recommender: null
    ): TypedEventFilter<
      [string, string],
      { addr: string; recommender: string }
    >;

    RegisterFNode(
      addr: null,
      id: null,
      rnode: null,
      fnode: null
    ): TypedEventFilter<
      [string, string, string, string],
      { addr: string; id: string; rnode: string; fnode: string }
    >;

    RegisterMobile(
      addr: null,
      phone: null
    ): TypedEventFilter<[string, string], { addr: string; phone: string }>;

    RegisterRNode(
      addr: null,
      id: null,
      rnode: null
    ): TypedEventFilter<
      [string, string, string],
      { addr: string; id: string; rnode: string }
    >;
  };

  estimateGas: {
    register(
      recommender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "register(address)"(
      recommender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerFNode(string,string)"(
      id: string,
      rnode_id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerFNode(string,address)"(
      id: string,
      rnode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerMobile(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerMobile(string)"(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerRNode(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerRNode(string)"(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    register(
      recommender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "register(address)"(
      recommender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerFNode(string,string)"(
      id: string,
      rnode_id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerFNode(string,address)"(
      id: string,
      rnode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerMobile(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerMobile(string)"(
      phone: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerRNode(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerRNode(string)"(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
