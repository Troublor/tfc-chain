/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TurboFilInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAINTAIN_ROLE()": FunctionFragment;
    "SECTOR_ROLE()": FunctionFragment;
    "SEED_ROLE()": FunctionFragment;
    "VERIFY_ROLE()": FunctionFragment;
    "depositRequirement()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lockPeriod()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardUnit()": FunctionFragment;
    "sectorAtIndex(uint256)": FunctionFragment;
    "sectorVerification_callback(bytes28,bytes28,bool)": FunctionFragment;
    "sectorWithAfid(bytes28)": FunctionFragment;
    "seedUsed(bytes28)": FunctionFragment;
    "setLockPeriod(uint256)": FunctionFragment;
    "setReward(uint256)": FunctionFragment;
    "submitSector(address,bytes28)": FunctionFragment;
    "submitSeed(bytes28)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINTAIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SEED_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VERIFY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sectorAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sectorVerification_callback",
    values: [BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sectorWithAfid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "seedUsed", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSector",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSeed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAINTAIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SEED_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VERIFY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardUnit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sectorAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sectorVerification_callback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sectorWithAfid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seedUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitSector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SectorSubmission(address,bytes28,address)": EventFragment;
    "SeedSectorVerify(bytes28,bytes28)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SectorSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeedSectorVerify"): EventFragment;
}

export class TurboFil extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TurboFilInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MAINTAIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MAINTAIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SECTOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SECTOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SEED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    depositRequirement(overrides?: CallOverrides): Promise<[BigNumber]>;

    "depositRequirement()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardUnit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sectorAtIndex(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "sectorAtIndex(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sectorVerification_callback(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sectorVerification_callback(bytes28,bytes28,bool)"(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sectorWithAfid(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "sectorWithAfid(bytes28)"(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    seedUsed(seed_: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "seedUsed(bytes28)"(
      seed_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setLockPeriod(
      lockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLockPeriod(uint256)"(
      lockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReward(
      reward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReward(uint256)"(
      reward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitSector(
      owner_: string,
      afid_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitSector(address,bytes28)"(
      owner_: string,
      afid_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitSeed(
      seed_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitSeed(bytes28)"(
      seed_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MAINTAIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "MAINTAIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SECTOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "SECTOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SEED_ROLE(overrides?: CallOverrides): Promise<string>;

  "SEED_ROLE()"(overrides?: CallOverrides): Promise<string>;

  VERIFY_ROLE(overrides?: CallOverrides): Promise<string>;

  "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<string>;

  depositRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  "depositRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "lockPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardUnit(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

  sectorAtIndex(
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "sectorAtIndex(uint256)"(
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  sectorVerification_callback(
    seed_: BytesLike,
    sector_afid_: BytesLike,
    result_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sectorVerification_callback(bytes28,bytes28,bool)"(
    seed_: BytesLike,
    sector_afid_: BytesLike,
    result_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sectorWithAfid(afid_: BytesLike, overrides?: CallOverrides): Promise<string>;

  "sectorWithAfid(bytes28)"(
    afid_: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  seedUsed(seed_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "seedUsed(bytes28)"(
    seed_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setLockPeriod(
    lockPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLockPeriod(uint256)"(
    lockPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReward(
    reward_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReward(uint256)"(
    reward_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitSector(
    owner_: string,
    afid_: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitSector(address,bytes28)"(
    owner_: string,
    afid_: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitSeed(
    seed_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitSeed(bytes28)"(
    seed_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MAINTAIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "MAINTAIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SECTOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "SECTOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SEED_ROLE(overrides?: CallOverrides): Promise<string>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<string>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<string>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<string>;

    depositRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "depositRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "lockPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    sectorAtIndex(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "sectorAtIndex(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sectorVerification_callback(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "sectorVerification_callback(bytes28,bytes28,bool)"(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sectorWithAfid(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "sectorWithAfid(bytes28)"(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    seedUsed(seed_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "seedUsed(bytes28)"(
      seed_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLockPeriod(
      lockPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockPeriod(uint256)"(
      lockPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReward(reward_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setReward(uint256)"(
      reward_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSector(
      owner_: string,
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitSector(address,bytes28)"(
      owner_: string,
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSeed(seed_: BytesLike, overrides?: CallOverrides): Promise<void>;

    "submitSeed(bytes28)"(
      seed_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    SectorSubmission(
      owner: null,
      afid: null,
      sector: null
    ): TypedEventFilter<
      [string, string, string],
      { owner: string; afid: string; sector: string }
    >;

    SeedSectorVerify(
      seed: null,
      sector_afid: null
    ): TypedEventFilter<
      [string, string],
      { seed: string; sector_afid: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAINTAIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAINTAIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SECTOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SECTOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "depositRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "lockPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    sectorAtIndex(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sectorAtIndex(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sectorVerification_callback(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sectorVerification_callback(bytes28,bytes28,bool)"(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sectorWithAfid(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sectorWithAfid(bytes28)"(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seedUsed(seed_: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "seedUsed(bytes28)"(
      seed_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLockPeriod(
      lockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLockPeriod(uint256)"(
      lockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReward(
      reward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReward(uint256)"(
      reward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitSector(
      owner_: string,
      afid_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitSector(address,bytes28)"(
      owner_: string,
      afid_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitSeed(
      seed_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitSeed(bytes28)"(
      seed_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAINTAIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAINTAIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECTOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SECTOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SEED_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERIFY_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositRequirement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardUnit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sectorAtIndex(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sectorAtIndex(uint256)"(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sectorVerification_callback(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sectorVerification_callback(bytes28,bytes28,bool)"(
      seed_: BytesLike,
      sector_afid_: BytesLike,
      result_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sectorWithAfid(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sectorWithAfid(bytes28)"(
      afid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seedUsed(
      seed_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seedUsed(bytes28)"(
      seed_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLockPeriod(
      lockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLockPeriod(uint256)"(
      lockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      reward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReward(uint256)"(
      reward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitSector(
      owner_: string,
      afid_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitSector(address,bytes28)"(
      owner_: string,
      afid_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitSeed(
      seed_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitSeed(bytes28)"(
      seed_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
